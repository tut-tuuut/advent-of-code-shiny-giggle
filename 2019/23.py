import intcode as it
program = (3,62,1001,62,11,10,109,2243,105,1,0,1602,1878,1536,792,1113,1307,1210,2179,1643,631,1845,891,1944,2146,1783,1437,763,1752,1569,600,1723,1272,1981,2082,1373,1013,2047,1048,858,571,2014,1340,1239,2113,1146,1466,662,730,1179,984,1816,1402,955,825,924,2212,699,1911,1503,1682,0,0,0,0,0,0,0,0,0,0,0,0,3,64,1008,64,-1,62,1006,62,88,1006,61,170,1105,1,73,3,65,20101,0,64,1,20101,0,66,2,21102,1,105,0,1106,0,436,1201,1,-1,64,1007,64,0,62,1005,62,73,7,64,67,62,1006,62,73,1002,64,2,133,1,133,68,133,101,0,0,62,1001,133,1,140,8,0,65,63,2,63,62,62,1005,62,73,1002,64,2,161,1,161,68,161,1101,1,0,0,1001,161,1,169,101,0,65,0,1101,1,0,61,1102,0,1,63,7,63,67,62,1006,62,203,1002,63,2,194,1,68,194,194,1006,0,73,1001,63,1,63,1106,0,178,21101,0,210,0,106,0,69,1201,1,0,70,1101,0,0,63,7,63,71,62,1006,62,250,1002,63,2,234,1,72,234,234,4,0,101,1,234,240,4,0,4,70,1001,63,1,63,1105,1,218,1105,1,73,109,4,21101,0,0,-3,21101,0,0,-2,20207,-2,67,-1,1206,-1,293,1202,-2,2,283,101,1,283,283,1,68,283,283,22001,0,-3,-3,21201,-2,1,-2,1105,1,263,21201,-3,0,-3,109,-4,2106,0,0,109,4,21102,1,1,-3,21101,0,0,-2,20207,-2,67,-1,1206,-1,342,1202,-2,2,332,101,1,332,332,1,68,332,332,22002,0,-3,-3,21201,-2,1,-2,1106,0,312,21201,-3,0,-3,109,-4,2106,0,0,109,1,101,1,68,358,21001,0,0,1,101,3,68,366,21001,0,0,2,21102,1,376,0,1105,1,436,22101,0,1,0,109,-1,2106,0,0,1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648,4294967296,8589934592,17179869184,34359738368,68719476736,137438953472,274877906944,549755813888,1099511627776,2199023255552,4398046511104,8796093022208,17592186044416,35184372088832,70368744177664,140737488355328,281474976710656,562949953421312,1125899906842624,109,8,21202,-6,10,-5,22207,-7,-5,-5,1205,-5,521,21101,0,0,-4,21102,0,1,-3,21101,0,51,-2,21201,-2,-1,-2,1201,-2,385,471,20102,1,0,-1,21202,-3,2,-3,22207,-7,-1,-5,1205,-5,496,21201,-3,1,-3,22102,-1,-1,-5,22201,-7,-5,-7,22207,-3,-6,-5,1205,-5,515,22102,-1,-6,-5,22201,-3,-5,-3,22201,-1,-4,-4,1205,-2,461,1105,1,547,21102,1,-1,-4,21202,-6,-1,-6,21207,-7,0,-5,1205,-5,547,22201,-7,-6,-7,21201,-4,1,-4,1105,1,529,22101,0,-4,-7,109,-8,2105,1,0,109,1,101,1,68,564,20101,0,0,0,109,-1,2105,1,0,1102,1,100999,66,1101,0,1,67,1102,1,598,68,1102,1,556,69,1102,1,0,71,1101,600,0,72,1106,0,73,1,1586,1101,77659,0,66,1102,1,1,67,1102,627,1,68,1102,556,1,69,1101,0,1,71,1101,0,629,72,1105,1,73,1,-3,21,47919,1102,1,33797,66,1102,1,1,67,1102,1,658,68,1102,1,556,69,1102,1,1,71,1101,0,660,72,1105,1,73,1,-67763,48,11383,1102,1,35267,66,1102,1,4,67,1101,0,689,68,1102,302,1,69,1102,1,1,71,1102,697,1,72,1106,0,73,0,0,0,0,0,0,0,0,49,74577,1101,0,40597,66,1102,1,1,67,1102,1,726,68,1101,556,0,69,1101,0,1,71,1101,728,0,72,1105,1,73,1,1163,35,92186,1101,12391,0,66,1102,1,2,67,1102,1,757,68,1101,0,302,69,1102,1,1,71,1102,1,761,72,1106,0,73,0,0,0,0,8,33452,1101,16253,0,66,1102,1,1,67,1101,0,790,68,1101,556,0,69,1102,1,0,71,1102,1,792,72,1106,0,73,1,1619,1101,0,27197,66,1101,1,0,67,1102,819,1,68,1102,1,556,69,1102,1,2,71,1102,821,1,72,1105,1,73,1,10,36,70534,49,124295,1102,1,26189,66,1102,2,1,67,1101,852,0,68,1102,1,302,69,1101,1,0,71,1102,1,856,72,1105,1,73,0,0,0,0,30,19181,1101,0,73673,66,1101,0,2,67,1101,885,0,68,1101,0,302,69,1101,0,1,71,1102,889,1,72,1105,1,73,0,0,0,0,21,15973,1101,0,59377,66,1101,0,2,67,1101,918,0,68,1101,0,302,69,1101,0,1,71,1102,922,1,72,1105,1,73,0,0,0,0,37,24782,1101,67891,0,66,1102,1,1,67,1101,0,951,68,1101,556,0,69,1102,1,1,71,1102,953,1,72,1106,0,73,1,125,36,35267,1102,1,32057,66,1101,1,0,67,1101,0,982,68,1101,0,556,69,1102,0,1,71,1101,984,0,72,1106,0,73,1,1259,1101,0,14177,66,1102,1,1,67,1101,0,1011,68,1102,556,1,69,1102,1,0,71,1101,0,1013,72,1106,0,73,1,1997,1101,13687,0,66,1102,1,3,67,1101,0,1040,68,1102,1,302,69,1102,1,1,71,1102,1,1046,72,1106,0,73,0,0,0,0,0,0,12,27551,1102,1,3079,66,1102,1,1,67,1102,1,1075,68,1101,0,556,69,1102,18,1,71,1101,0,1077,72,1105,1,73,1,1,22,52973,13,180142,33,52561,7,13346,48,22766,34,11987,43,26189,30,38362,35,138279,31,31574,2,89071,11,59377,37,12391,5,1069,32,82279,18,43138,28,147346,21,31946,1101,69557,0,66,1102,1,1,67,1101,1140,0,68,1102,556,1,69,1102,2,1,71,1101,0,1142,72,1105,1,73,1,11,8,25089,8,41815,1101,11987,0,66,1101,2,0,67,1101,0,1173,68,1102,1,302,69,1102,1,1,71,1102,1,1177,72,1106,0,73,0,0,0,0,43,52378,1101,22871,0,66,1102,1,1,67,1101,0,1206,68,1101,556,0,69,1102,1,1,71,1101,0,1208,72,1105,1,73,1,21589,31,15787,1101,50971,0,66,1101,0,1,67,1101,0,1237,68,1101,0,556,69,1102,1,0,71,1102,1239,1,72,1106,0,73,1,1914,1102,1,82279,66,1101,0,2,67,1101,1266,0,68,1101,302,0,69,1102,1,1,71,1101,1270,0,72,1105,1,73,0,0,0,0,18,21569,1102,1,15973,66,1101,3,0,67,1102,1,1299,68,1102,302,1,69,1102,1,1,71,1102,1305,1,72,1105,1,73,0,0,0,0,0,0,25,41061,1101,1069,0,66,1102,1,2,67,1101,0,1334,68,1101,0,302,69,1101,0,1,71,1102,1338,1,72,1105,1,73,0,0,0,0,32,164558,1101,15787,0,66,1102,2,1,67,1102,1,1367,68,1102,1,302,69,1101,0,1,71,1101,0,1371,72,1105,1,73,0,0,0,0,2,178142,1102,1,57559,66,1101,1,0,67,1101,0,1400,68,1101,556,0,69,1102,0,1,71,1102,1,1402,72,1106,0,73,1,1767,1101,37561,0,66,1101,0,1,67,1101,0,1429,68,1102,556,1,69,1101,3,0,71,1102,1,1431,72,1106,0,73,1,5,36,105801,36,141068,49,99436,1102,1,18583,66,1101,1,0,67,1102,1464,1,68,1102,556,1,69,1102,1,0,71,1101,0,1466,72,1105,1,73,1,1298,1102,1,46093,66,1101,0,4,67,1102,1493,1,68,1101,0,302,69,1102,1,1,71,1102,1,1501,72,1106,0,73,0,0,0,0,0,0,0,0,12,55102,1102,11383,1,66,1101,2,0,67,1101,1530,0,68,1101,302,0,69,1102,1,1,71,1101,0,1534,72,1105,1,73,0,0,0,0,34,23974,1102,1,89071,66,1102,1,2,67,1102,1563,1,68,1102,302,1,69,1102,1,1,71,1102,1,1567,72,1105,1,73,0,0,0,0,11,118754,1101,0,21569,66,1102,2,1,67,1101,0,1596,68,1101,0,302,69,1101,1,0,71,1102,1600,1,72,1106,0,73,0,0,0,0,28,73673,1101,55691,0,66,1101,1,0,67,1101,0,1629,68,1101,556,0,69,1102,1,6,71,1102,1631,1,72,1105,1,73,1,26284,1,42178,25,13687,25,27374,26,10193,26,20386,26,30579,1102,1,8363,66,1102,1,5,67,1102,1,1670,68,1102,302,1,69,1101,0,1,71,1102,1680,1,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,1,21089,1101,24859,0,66,1102,1,6,67,1102,1709,1,68,1101,302,0,69,1102,1,1,71,1101,0,1721,72,1106,0,73,0,0,0,0,0,0,0,0,0,0,0,0,14,70162,1102,1,81853,66,1102,1,1,67,1102,1750,1,68,1102,1,556,69,1102,0,1,71,1101,1752,0,72,1106,0,73,1,1212,1101,57689,0,66,1101,1,0,67,1101,0,1779,68,1102,556,1,69,1102,1,1,71,1102,1,1781,72,1105,1,73,1,37,8,8363,1102,35081,1,66,1102,1,2,67,1102,1,1810,68,1101,351,0,69,1101,1,0,71,1102,1814,1,72,1105,1,73,0,0,0,0,255,55691,1102,67699,1,66,1101,1,0,67,1102,1,1843,68,1102,1,556,69,1102,1,0,71,1102,1,1845,72,1106,0,73,1,1565,1102,33161,1,66,1101,1,0,67,1102,1,1872,68,1102,556,1,69,1102,1,2,71,1102,1,1874,72,1105,1,73,1,2,49,24859,49,149154,1102,21089,1,66,1101,0,2,67,1102,1905,1,68,1102,1,302,69,1102,1,1,71,1101,0,1909,72,1105,1,73,0,0,0,0,12,82653,1102,95479,1,66,1102,1,1,67,1101,0,1938,68,1102,1,556,69,1101,0,2,71,1101,0,1940,72,1106,0,73,1,19463,22,105946,5,2138,1101,27551,0,66,1101,4,0,67,1102,1,1971,68,1102,1,253,69,1102,1,1,71,1101,0,1979,72,1106,0,73,0,0,0,0,0,0,0,0,14,35081,1101,52973,0,66,1102,2,1,67,1101,2008,0,68,1101,302,0,69,1101,0,1,71,1102,1,2012,72,1105,1,73,0,0,0,0,13,90071,1101,19181,0,66,1101,2,0,67,1101,0,2041,68,1102,302,1,69,1102,1,1,71,1102,2045,1,72,1106,0,73,0,0,0,0,35,46093,1102,1,10193,66,1102,3,1,67,1101,0,2074,68,1101,302,0,69,1102,1,1,71,1102,2080,1,72,1105,1,73,0,0,0,0,0,0,12,110204,1102,97777,1,66,1102,1,1,67,1101,0,2109,68,1102,556,1,69,1102,1,1,71,1102,2111,1,72,1105,1,73,1,160,49,49718,1102,1,52561,66,1102,1,2,67,1101,2140,0,68,1102,1,302,69,1102,1,1,71,1102,2144,1,72,1106,0,73,0,0,0,0,7,6673,1102,90071,1,66,1102,1,2,67,1101,2173,0,68,1101,0,302,69,1101,0,1,71,1102,2177,1,72,1105,1,73,0,0,0,0,33,105122,1102,6673,1,66,1101,2,0,67,1102,2206,1,68,1101,0,302,69,1102,1,1,71,1101,0,2210,72,1106,0,73,0,0,0,0,35,184372,1102,87961,1,66,1101,0,1,67,1101,0,2239,68,1101,0,556,69,1102,1,1,71,1102,2241,1,72,1106,0,73,1,19,8,16726)

class Network:
    def __init__(self):
        self.queues = {}
    
    def enqueue(self, address, x, y):
        if address not in self.queues.keys():
            self.queues[address] = []
        self.queues[address].append([x,y])
    
    def dequeue(self, address):
        if address not in self.queues.keys():
            return [-1]
        elif len(self.queues[address]) == 0:
            return [-1]
        else:
            return self.queues[address].pop(0)


def part1():
    computers = []
    network = Network()
    for i in range(2,3):
        print(f'booting computer {i}')
        c = it.Computer(list(program))
        print(sum(c.program))
        print(c.rb)
        print(c.i)
        print(f'setting network address')
        r1 = c.run([i] + network.dequeue(i))
        if (r1 != None):
            print(f'r1 was {r1}, get other output values')
            r2 = c.run([])
            r3 = c.run([])
            print([r1, r2, r3])
            network.enqueue(r1, r2, r3)
        print(c.rb)
        print(c.i)
        print(sum(c.program))
        computers.append(c)


part1()